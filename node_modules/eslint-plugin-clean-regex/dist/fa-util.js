"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.nfaUnionAll = exports.nfaIsSubsetOf = exports.nfaIsSupersetOf = exports.nfaEquals = void 0;
const refa_1 = require("refa");
function nfaEquals(a, b) {
    if (a.isEmpty || b.isEmpty) {
        return a.isEmpty === b.isEmpty;
    }
    if (a.options.maxCharacter !== b.options.maxCharacter) {
        return false;
    }
    const { maxCharacter } = a.options;
    const x = a.nodes;
    const y = b.nodes;
    if (x.finals.has(x.initial) !== y.finals.has(y.initial)) {
        return false;
    }
    function unionAll(iter) {
        let total = undefined;
        for (const item of iter) {
            if (total === undefined) {
                total = item;
            }
            else {
                total = total.union(item);
            }
        }
        return total || refa_1.CharSet.empty(maxCharacter);
    }
    if (!unionAll(x.initial.out.values()).equals(unionAll(y.initial.out.values()))) {
        return false;
    }
    const aDfa = refa_1.DFA.fromFA(a);
    aDfa.minimize();
    const bDfa = refa_1.DFA.fromFA(b);
    bDfa.minimize();
    return aDfa.structurallyEqual(bDfa);
}
exports.nfaEquals = nfaEquals;
function nfaIsSupersetOf(superset, subset) {
    const union = superset.copy();
    union.union(subset);
    return nfaEquals(union, superset);
}
exports.nfaIsSupersetOf = nfaIsSupersetOf;
function nfaIsSubsetOf(subset, superset) {
    return nfaIsSupersetOf(superset, subset);
}
exports.nfaIsSubsetOf = nfaIsSubsetOf;
function nfaUnionAll(nfas, options) {
    const total = refa_1.NFA.empty(options);
    for (const nfa of nfas) {
        total.union(nfa);
    }
    return total;
}
exports.nfaUnionAll = nfaUnionAll;
