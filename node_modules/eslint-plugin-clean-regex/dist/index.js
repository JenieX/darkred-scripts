"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.rules = exports.configs = void 0;
const configs_1 = __importDefault(require("./configs"));
const confusing_quantifier_1 = __importDefault(require("./rules/confusing-quantifier"));
const consistent_match_all_characters_1 = __importDefault(require("./rules/consistent-match-all-characters"));
const disjoint_alternatives_1 = __importDefault(require("./rules/disjoint-alternatives"));
const identity_escape_1 = __importDefault(require("./rules/identity-escape"));
const no_constant_capturing_group_1 = __importDefault(require("./rules/no-constant-capturing-group"));
const no_empty_alternative_1 = __importDefault(require("./rules/no-empty-alternative"));
const no_empty_backreference_1 = __importDefault(require("./rules/no-empty-backreference"));
const no_empty_lookaround_1 = __importDefault(require("./rules/no-empty-lookaround"));
const no_lazy_ends_1 = __importDefault(require("./rules/no-lazy-ends"));
const no_obscure_range_1 = __importDefault(require("./rules/no-obscure-range"));
const no_octal_escape_1 = __importDefault(require("./rules/no-octal-escape"));
const no_optional_assertion_1 = __importDefault(require("./rules/no-optional-assertion"));
const no_potentially_empty_backreference_1 = __importDefault(require("./rules/no-potentially-empty-backreference"));
const no_trivially_nested_lookaround_1 = __importDefault(require("./rules/no-trivially-nested-lookaround"));
const no_trivially_nested_quantifier_1 = __importDefault(require("./rules/no-trivially-nested-quantifier"));
const no_unnecessary_assertions_1 = __importDefault(require("./rules/no-unnecessary-assertions"));
const no_unnecessary_character_class_1 = __importDefault(require("./rules/no-unnecessary-character-class"));
const no_unnecessary_flag_1 = __importDefault(require("./rules/no-unnecessary-flag"));
const no_unnecessary_group_1 = __importDefault(require("./rules/no-unnecessary-group"));
const no_unnecessary_lazy_1 = __importDefault(require("./rules/no-unnecessary-lazy"));
const no_unnecessary_quantifier_1 = __importDefault(require("./rules/no-unnecessary-quantifier"));
const no_zero_quantifier_1 = __importDefault(require("./rules/no-zero-quantifier"));
const optimal_concatenation_quantifier_1 = __importDefault(require("./rules/optimal-concatenation-quantifier"));
const optimal_lookaround_quantifier_1 = __importDefault(require("./rules/optimal-lookaround-quantifier"));
const optimized_character_class_1 = __importDefault(require("./rules/optimized-character-class"));
const prefer_character_class_1 = __importDefault(require("./rules/prefer-character-class"));
const prefer_predefined_assertion_1 = __importDefault(require("./rules/prefer-predefined-assertion"));
const prefer_predefined_character_set_1 = __importDefault(require("./rules/prefer-predefined-character-set"));
const prefer_predefined_quantifiers_1 = __importDefault(require("./rules/prefer-predefined-quantifiers"));
const simple_constant_quantifier_1 = __importDefault(require("./rules/simple-constant-quantifier"));
const sort_flags_1 = __importDefault(require("./rules/sort-flags"));
exports.configs = configs_1.default;
exports.rules = {
    "confusing-quantifier": confusing_quantifier_1.default,
    "consistent-match-all-characters": consistent_match_all_characters_1.default,
    "disjoint-alternatives": disjoint_alternatives_1.default,
    "identity-escape": identity_escape_1.default,
    "no-constant-capturing-group": no_constant_capturing_group_1.default,
    "no-empty-alternative": no_empty_alternative_1.default,
    "no-empty-backreference": no_empty_backreference_1.default,
    "no-empty-lookaround": no_empty_lookaround_1.default,
    "no-lazy-ends": no_lazy_ends_1.default,
    "no-obscure-range": no_obscure_range_1.default,
    "no-octal-escape": no_octal_escape_1.default,
    "no-optional-assertion": no_optional_assertion_1.default,
    "no-potentially-empty-backreference": no_potentially_empty_backreference_1.default,
    "no-trivially-nested-lookaround": no_trivially_nested_lookaround_1.default,
    "no-trivially-nested-quantifier": no_trivially_nested_quantifier_1.default,
    "no-unnecessary-assertions": no_unnecessary_assertions_1.default,
    "no-unnecessary-character-class": no_unnecessary_character_class_1.default,
    "no-unnecessary-flag": no_unnecessary_flag_1.default,
    "no-unnecessary-group": no_unnecessary_group_1.default,
    "no-unnecessary-lazy": no_unnecessary_lazy_1.default,
    "no-unnecessary-quantifier": no_unnecessary_quantifier_1.default,
    "no-zero-quantifier": no_zero_quantifier_1.default,
    "optimal-concatenation-quantifier": optimal_concatenation_quantifier_1.default,
    "optimal-lookaround-quantifier": optimal_lookaround_quantifier_1.default,
    "optimized-character-class": optimized_character_class_1.default,
    "prefer-character-class": prefer_character_class_1.default,
    "prefer-predefined-assertion": prefer_predefined_assertion_1.default,
    "prefer-predefined-character-set": prefer_predefined_character_set_1.default,
    "prefer-predefined-quantifiers": prefer_predefined_quantifiers_1.default,
    "simple-constant-quantifier": simple_constant_quantifier_1.default,
    "sort-flags": sort_flags_1.default,
};
