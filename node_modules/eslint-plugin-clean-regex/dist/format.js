"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.many = exports.mentionCharElement = exports.mention = exports.toRegExpString = exports.shorten = void 0;
const refa_1 = require("refa");
const util_1 = require("./util");
const ast_util_1 = require("./ast-util");
function shorten(string, maxLength, position) {
    if (string.length <= maxLength) {
        return string;
    }
    else {
        maxLength--;
        if (position === "end" || position == undefined) {
            return string.substr(0, maxLength) + "…";
        }
        else if (position === "start") {
            return "…" + string.substr(string.length - maxLength, maxLength);
        }
        else if (position === "center") {
            const start = maxLength >>> 1;
            const end = start + (maxLength % 2);
            return string.substr(0, start) + "…" + string.substr(string.length - end, end);
        }
        else {
            throw new Error("Invalid position.");
        }
    }
}
exports.shorten = shorten;
function toRegExpString(value) {
    if ("toRegex" in value) {
        const re = value.toRegex();
        const literal = refa_1.JS.toLiteral(re);
        return toRegExpString(literal);
    }
    else {
        return `/${value.source}/${value.flags}`;
    }
}
exports.toRegExpString = toRegExpString;
function mention(node) {
    return "`" + (typeof node === "string" ? node : node.raw) + "`";
}
exports.mention = mention;
function mentionCharElement(element) {
    switch (element.type) {
        case "Character":
            return `${mention(element)} (${ast_util_1.minimalHexEscape(element.value)})`;
        case "CharacterClassRange":
            return `${mention(element)} (${ast_util_1.minimalHexEscape(element.min.value)}-${ast_util_1.minimalHexEscape(element.max.value)})`;
        case "CharacterSet":
            switch (element.kind) {
                case "digit":
                    return `${mention(element)} ([${element.negate ? "^" : ""}0-9])`;
                case "word":
                    return `${mention(element)} ([${element.negate ? "^" : ""}0-9A-Za-z_])`;
                default:
                    return mention(element);
            }
        default:
            throw util_1.assertNever(element);
    }
}
exports.mentionCharElement = mentionCharElement;
function many(count, unit, unitPlural) {
    if (!unitPlural) {
        if (unit.length > 1 && unit[unit.length - 1] === "y") {
            unitPlural = unit.substr(0, unit.length - 1) + "ies";
        }
        else {
            unitPlural = unit + "s";
        }
    }
    if (count === 1) {
        return "1 " + unit;
    }
    else {
        return count + " " + unitPlural;
    }
}
exports.many = many;
