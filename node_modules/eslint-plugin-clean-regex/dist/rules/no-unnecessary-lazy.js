"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rules_util_1 = require("../rules-util");
const ast_util_1 = require("../ast-util");
function withoutLazy(node) {
    let raw = ast_util_1.getQuantifierRaw(node);
    raw = raw.substr(0, raw.length - 1);
    return raw;
}
exports.default = {
    meta: {
        type: "suggestion",
        docs: {
            description: "Disallow unnecessarily lazy quantifiers.",
            url: rules_util_1.getDocUrl("no-unnecessary-lazy"),
        },
        fixable: "code",
    },
    create(context) {
        return rules_util_1.createRuleListener(({ visitAST, flags, replaceQuantifier }) => {
            visitAST({
                onQuantifierEnter(node) {
                    if (node.greedy) {
                        return;
                    }
                    if (node.min === node.max) {
                        context.report(Object.assign({ message: "The lazy modifier is unnecessary for constant quantifiers." }, replaceQuantifier(node, withoutLazy(node))));
                        return;
                    }
                    const matchingDir = ast_util_1.matchingDirection(node);
                    const firstChar = ast_util_1.getFirstCharConsumedBy(node, matchingDir, flags);
                    if (!firstChar.empty) {
                        const after = ast_util_1.getFirstCharAfter(node, matchingDir, flags);
                        if (!after.char.edge && firstChar.char.isDisjointWith(after.char.char)) {
                            context.report(Object.assign({ message: "The lazy modifier is unnecessary because the first character of the quantified element are always different from the characters that come after the quantifier." }, replaceQuantifier(node, withoutLazy(node), { dependsOn: after.elements })));
                            return;
                        }
                    }
                },
            });
        });
    },
};
