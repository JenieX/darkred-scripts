"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rules_util_1 = require("../rules-util");
const ast_util_1 = require("../ast-util");
const allowedRanges = [
    { min: "0".charCodeAt(0), max: "9".charCodeAt(0) },
    { min: "A".charCodeAt(0), max: "Z".charCodeAt(0) },
    { min: "a".charCodeAt(0), max: "z".charCodeAt(0) },
];
function inRange(char, range) {
    return range.min <= char && char <= range.max;
}
exports.default = {
    meta: {
        type: "problem",
        docs: {
            description: "Disallow obscure ranges in character classes.",
            url: rules_util_1.getDocUrl("no-obscure-range"),
        },
    },
    create(context) {
        return rules_util_1.createRuleListener(({ visitAST, reportElement }) => {
            visitAST({
                onCharacterClassRangeEnter(node) {
                    const { min, max } = node;
                    if (min.value == max.value) {
                        return;
                    }
                    if (ast_util_1.isControlEscapeSequence(min) && ast_util_1.isControlEscapeSequence(max)) {
                        return;
                    }
                    if (ast_util_1.isOctalEscapeSequence(min) && ast_util_1.isOctalEscapeSequence(max)) {
                        return;
                    }
                    if ((ast_util_1.isHexadecimalEscapeSequence(min) || min.value === 0) && ast_util_1.isHexadecimalEscapeSequence(max)) {
                        return;
                    }
                    if (allowedRanges.some(r => inRange(min.value, r) && inRange(max.value, r))) {
                        return;
                    }
                    context.report(Object.assign({ message: `It's not obvious what characters are matched by ${node.raw}` }, reportElement(node)));
                },
            });
        });
    },
};
