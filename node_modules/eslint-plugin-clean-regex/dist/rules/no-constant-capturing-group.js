"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const format_1 = require("../format");
const rules_util_1 = require("../rules-util");
const ast_util_1 = require("../ast-util");
exports.default = {
    meta: {
        type: "suggestion",
        docs: {
            description: "Disallow capturing groups that can match only one word.",
            url: rules_util_1.getDocUrl("no-constant-capturing-group"),
        },
        schema: [
            {
                type: "object",
                properties: {
                    ignoreNonEmpty: {
                        type: "boolean",
                    },
                },
                additionalProperties: false,
            },
        ],
    },
    create(context) {
        let ignoreNonEmpty = (context.options[0] || {}).ignoreNonEmpty;
        if (typeof ignoreNonEmpty !== "boolean") {
            ignoreNonEmpty = true;
        }
        return rules_util_1.createRuleListener(({ visitAST, flags, reportElement }) => {
            visitAST({
                onCapturingGroupEnter(node) {
                    if (node.alternatives.length === 1) {
                        const concatenation = node.alternatives[0].elements;
                        if (concatenation.length === 0) {
                            context.report(Object.assign({ message: "Empty capturing group" }, reportElement(node)));
                            return;
                        }
                    }
                    const constant = ast_util_1.getConstant(node, flags);
                    if (constant && !(ignoreNonEmpty && constant.word !== "")) {
                        const word = constant.word
                            ? `one word which is ${JSON.stringify(constant.word)}`
                            : "the empty string";
                        context.report(Object.assign({ message: `The capturing group ${format_1.mention(node)} can only capture ${word}.` }, reportElement(node)));
                        return;
                    }
                },
            });
        });
    },
};
