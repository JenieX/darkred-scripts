"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rules_util_1 = require("../rules-util");
const ast_util_1 = require("../ast-util");
exports.default = {
    meta: {
        type: "suggestion",
        docs: {
            description: "Disallow unnecessary quantifiers.",
            url: rules_util_1.getDocUrl("no-unnecessary-quantifier"),
        },
        fixable: "code",
    },
    create(context) {
        return rules_util_1.createRuleListener(({ visitAST, replaceElement, reportQuantifier }) => {
            visitAST({
                onQuantifierEnter(node) {
                    if (node.min === 1 && node.max === 1) {
                        context.report(Object.assign({ message: "Unnecessary quantifier." }, replaceElement(node, node.element.raw)));
                        return;
                    }
                    if (ast_util_1.isEmpty(node.element)) {
                        context.report(Object.assign({ message: "The quantified element is empty, so the quantifier can be removed." }, reportQuantifier(node)));
                        return;
                    }
                    if (node.min === 0 && node.max === 1 && ast_util_1.isPotentiallyEmpty(node.element)) {
                        context.report(Object.assign({ message: "The optional quantifier can be removed because the quantified element can match the empty string." }, reportQuantifier(node)));
                        return;
                    }
                    if (node.min > 0 && ast_util_1.isZeroLength(node.element)) {
                        context.report(Object.assign({ message: "The quantified element does not consume characters, so the quantifier (minimum > 0) can be removed." }, reportQuantifier(node)));
                        return;
                    }
                },
            });
        });
    },
};
