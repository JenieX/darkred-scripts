"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rules_util_1 = require("../rules-util");
const ast_util_1 = require("../ast-util");
const predefined = [
    { min: 0, max: Infinity, raw: "*" },
    { min: 1, max: Infinity, raw: "+" },
    { min: 0, max: 1, raw: "?" },
];
exports.default = {
    meta: {
        type: "suggestion",
        docs: {
            description: "Prefer predefined quantifiers (+*?) instead of their more verbose form.",
            url: rules_util_1.getDocUrl("prefer-predefined-quantifiers"),
        },
        fixable: "code",
    },
    create(context) {
        return rules_util_1.createRuleListener(({ visitAST, replaceQuantifier }) => {
            visitAST({
                onQuantifierEnter(node) {
                    let currentRaw = ast_util_1.getQuantifierRaw(node);
                    if (!node.greedy) {
                        currentRaw = currentRaw.substr(0, currentRaw.length - 1);
                    }
                    for (const { min, max, raw } of predefined) {
                        if (node.min === min && node.max === max && currentRaw !== raw) {
                            context.report(Object.assign({ message: `Use the predefined quantifier ${raw} instead.` }, replaceQuantifier(node, raw + (node.greedy ? "" : "?"))));
                        }
                    }
                },
            });
        });
    },
};
