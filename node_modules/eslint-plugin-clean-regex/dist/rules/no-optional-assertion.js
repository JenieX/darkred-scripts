"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rules_util_1 = require("../rules-util");
const format_1 = require("../format");
const util_1 = require("../util");
const ast_util_1 = require("../ast-util");
function getZeroQuantifier(node) {
    if (node.type === "Quantifier" && node.min === 0) {
        return node;
    }
    else if (node.parent) {
        return getZeroQuantifier(node.parent);
    }
    else {
        return null;
    }
}
function isOptional(assertion, quantifier) {
    function isOptionalImpl(element) {
        if (element.parent === quantifier) {
            return true;
        }
        const parent = element.parent;
        if (parent.type === "Alternative") {
            for (const e of parent.elements) {
                if (e === element) {
                    continue;
                }
                if (!ast_util_1.isZeroLength(e)) {
                    return false;
                }
            }
            if (parent.parent.type === "Pattern") {
                throw new Error("The given assertion is not a descendant of the given quantifier.");
            }
            else {
                return isOptionalImpl(parent.parent);
            }
        }
        else if (parent.type === "Quantifier") {
            if (parent.max > 1 && !ast_util_1.isZeroLength(parent)) {
                return false;
            }
            return isOptionalImpl(parent);
        }
        else {
            throw util_1.assertNever(parent);
        }
    }
    return isOptionalImpl(assertion);
}
exports.default = {
    meta: {
        type: "problem",
        docs: {
            description: "Disallow optional assertions.",
            url: rules_util_1.getDocUrl("no-optional-assertion"),
        },
    },
    create(context) {
        return rules_util_1.createRuleListener(({ visitAST, reportElement }) => {
            visitAST({
                onAssertionEnter(node) {
                    const q = getZeroQuantifier(node);
                    if (q && isOptional(node, q)) {
                        context.report(Object.assign({ message: "This assertion effectively optional and does not change the pattern." +
                                ` Either remove the assertion or change the parent quantifier ${format_1.mention(q.raw.substr(q.element.raw.length))}.` }, reportElement(node)));
                    }
                },
            });
        });
    },
};
