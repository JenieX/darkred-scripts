"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const rules_util_1 = require("../rules-util");
const format_1 = require("../format");
const ast_util_1 = require("../ast-util");
exports.default = {
    meta: {
        type: "problem",
        docs: {
            description: "Disallow lookarounds that can match the empty string.",
            url: rules_util_1.getDocUrl("no-empty-lookaround"),
        },
    },
    create(context) {
        return rules_util_1.createRuleListener(({ visitAST, reportElement }) => {
            visitAST({
                onAssertionEnter(node) {
                    if (node.kind !== "lookahead" && node.kind !== "lookbehind") {
                        return;
                    }
                    const empty = ast_util_1.isPotentiallyEmpty(node.alternatives, { backreferencesAreNonEmpty: true });
                    if (empty) {
                        context.report(Object.assign({ message: `The ${node.kind} ${format_1.mention(node)} is non-functional as it matches the empty string.` +
                                ` It will always trivially ${node.negate ? "reject" : "accept"}.` }, reportElement(node)));
                    }
                },
            });
        });
    },
};
